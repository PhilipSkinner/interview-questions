// Given an enumerable of strings, attempt to parse each string and if
// it is an integer, add it to the returned enumerable.
const extractNumbers = (source=[]) => {
	const integers = []
	for (let element of source) {
		let parsed = parseFloat(element)
		if (parsed) {
			integers.push(parsed)
		}
	}
	// console.log('integers', integers)

	return integers
};

// Given two enumerables of strings, find the longest common word.
const longestCommonWord = (first=[], second=[]) => {
	let string1 = new Set(first)
	let string2 = new Set(second)
	
	let currMax = ''
	string1.forEach(element => {
		if (string2.has(element) && element.length > currMax.length)
		currMax = element
	});
	
	console.log(currMax.length)
	return currMax
};

// Write a function that converts kilometers to miles, given that there are
// 1.6 kilometers per mile.
const distanceInMiles = (kilometers) => {
	return parseFloat(kilometers/1.6)
};

// Write a function that converts miles to kilometers, give that there are
const distanceInKm = (miles) => {
	return parseFloat(miles*(1.6))
};

// Write a function that returns true if the word is a palindrome, false if
// it is not.
// For example:
// isPalindrome("Anna");
// Also complete the related test case for this function.
const isPalindrome = (word='') => {
	word = word.toLowerCase()
	let i=0, j = word.length - 1
	while(i<j){
		if(word[i]!==word[j])
			return false
		i++, j--
	}
	
	return true
};


// Write a function that takes an enumerable list of objects and shuffles
// them into a different order.

const shuffle = (source=[]) => {
	for (let i = source.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [source[i], source[j]] = [source[j], source[i]];
    }
	return source
};

// Write a function that sorts an array of integers into ascending
const sort = (source = []) => {
	const mid = source.length / 2
	if(source.length < 2)
		return source
	
	const left = source.splice(0, mid)
	return merge(sort(left), sort(source))
};

const merge = (left = [], right = []) => {
	let arr = []
	while (left.length && right.length) {
        if (left[0] < right[0]) {
            arr.push(left.shift())  
        } else {
            arr.push(right.shift()) 
        }
    }
    return [ ...arr, ...left, ...right ]
}

// Each new term in the Fibonacci sequence is generated by adding the
// previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do
// not exceed four million, find the sum of the even-valued terms.
const fibonacciSum = () => {
	let sum = 0
	let prevElement = 1, element = 2

	while(element < 4000000){
		if(!(element & 1)){
			console.log('element', element)
			sum+=element
		}
		let next = element+prevElement
		prevElement = element
		element = next
	}

	return sum
}

// Generate a list of integers from 1 to 100.
//
// This function is currently broken, fix it so that the tests pass, without
// removing the function call that inserts the number.
const generateList = () => {
	var list = new Array();
	var funcs = new Array();
	for (var i = 1; i <= 100; i++) {
		funcs.push(function () {
			list.push(i);
		});
	};
	funcs.map((f) => f());
	return list;
};

module.exports = {
	extractNumbers: extractNumbers,
	longestCommonWord: longestCommonWord,
	distanceInMiles: distanceInMiles,
	distanceInKm: distanceInKm,
	isPalindrome: isPalindrome,
	shuffle: shuffle,
	sort: sort,
	fibonacciSum: fibonacciSum,
	generateList: generateList
};